#!/usr/bin/env python
import json
import os
import sys

from subprocess import call

from google.cloud import datastore
from google.oauth2 import service_account

DEBUG = os.getenv("PLUGIN_DEBUG", os.getenv("DEBUG", "")).lower() in ['yes', 'true', 'on']

project = os.getenv('PLUGIN_PROJECT', os.getenv("PROJECT"))

namespace = os.getenv('PLUGIN_NAMESPACE', os.getenv("NAMESPACE", "default"))
chart = os.getenv("PLUGIN_CHART", os.getenv("CHART"))
version = os.getenv("PLUGIN_VERSION", os.getenv("VERSION"))
release = os.getenv("PLUGIN_RELEASE_NAME", os.getenv("RELEASE_NAME"))
repos = os.getenv("PLUGIN_REPOS", os.getenv("REPOS"))
values = os.getenv("PLUGIN_VALUES", os.getenv("VALUES"))

timeout = os.getenv("PLUGIN_HELM_TIMEOUT", os.getenv("HELM_TIMEOUT", "300"))
wait = os.getenv("PLUGIN_HELM_WAIT", os.getenv("HELM_WAIT", "")).lower() in ["yes", "true", "on"]

if DEBUG:
    print("+ debug: yes")

if os.getenv("GOOGLE_CREDENTIALS"):
    credentials = service_account.Credentials.from_service_account_info(
        json.loads(os.getenv("GOOGLE_CREDENTIALS")))
    client = datastore.Client(credentials=credentials, project=project, namespace="helm")
else:
    client = datastore.Client(project=project, namespace="helm")

_repos = {}
if repos:
    if repos[0] == "{":  # repos passed as dict
        _repos = json.loads(repos)
    else:
        for repo in repos.split(","):
            name, url = repo.split("=", 2)
            _repos[name] = url

for repo_name in _repos:
    cmd = ['helm', 'repo', 'add', repo_name, _repos[repo_name]]
    if DEBUG:
        print(cmd)
    code = call(cmd)
    if code > 0:
        sys.exit(code)

cmd = ['helm', 'upgrade', '--install']
if wait:
    cmd += ['--wait', '--timeout', timeout]
cmd += ['--namespace', namespace]
if version:
    cmd += ['--version', version]
cmd += [release, chart]
if values:
    if values[0] == "{":  # values passed as dict
        values = json.loads(values)
        for name in values:
            cmd.append('--set')
            cmd.append('{name}={value}'.format(name=name, value=values[name]))
    else:  # values passed as array
        cmd += ["--set", values]
cmd += sys.argv[1:]

# Then query for entities
query = client.query(kind='values')
query.add_filter('release', '=', release)
for result in query.fetch():
    if result['name'] and result['value']:
        cmd.append('--set')
        cmd.append('{name}={value}'.format(**result))

if DEBUG:
    print(cmd)

code = call(cmd)
sys.exit(code)
